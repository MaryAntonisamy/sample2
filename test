services.AddHostedService<Worker>(provider => {
    var logger = provider.GetService<ILogger<Worker>>();
    var scopeFactory = provider.GetRequiredService<IServiceScopeFactory>();
    // Fetch and parse the interval environment variable
    var intervalEnv = Environment.GetEnvironmentVariable("AllpayRecurringEventsEventPublisherInterval");
    // Safely parse the interval, providing a default if necessary
    if (!TimeSpan.TryParse(intervalEnv, out TimeSpan interval))
    {
        interval = TimeSpan.FromMinutes(5);  // Default interval if parsing fails
        // Log an error or warning if needed
        var logger = provider.GetRequiredService<ILogger<Worker>>();
        logger.LogWarning("Invalid interval provided. Using default interval of 5 minutes.");
    }

    return new Worker(logger, scopeFactory, interval);
});

public class Worker : BackgroundService
{
    private readonly ILogger<Worker> _logger;
    private readonly IServiceScopeFactory _scopeFactory;
    private readonly TimeSpan _interval;

    public Worker(ILogger<Worker> logger, IServiceScopeFactory scopeFactory, TimeSpan interval)
    {
        _logger = logger;
        _scopeFactory = scopeFactory;
        _interval = interval;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {
            using (var scope = _scopeFactory.CreateScope())
            {
                var serviceBusPublisher = scope.ServiceProvider.GetRequiredService<IServiceBusPublisher>();
                // Use serviceBusPublisher here
            }
            await Task.Delay(_interval, stoppingToken);
        }
    }
}

